/*
 * DO NOT EDIT THIS FILE, IT IS MACHINE-GENERATED
 * File created at Thu Oct 25 22:14:10 CEST 2012 using org.esa.beam.extapi.gen.ExtApiGen
 */


/* Wrapped API classes */
typedef void* ProductIO;
typedef void* ProductReader;
typedef void* ProductWriter;
typedef void* AngularDirection;
typedef void* Band;
typedef void* ColorPaletteDef;
typedef void* ColorPaletteDef_Point;
typedef void* FlagCoding;
typedef void* GeoCoding;
typedef void* GeoPos;
typedef void* ImageGeometry;
typedef void* ImageInfo;
typedef void* IndexCoding;
typedef void* MetadataAttribute;
typedef void* MetadataElement;
typedef void* PixelPos;
typedef void* Placemark;
typedef void* PlacemarkGroup;
typedef void* Product;
typedef void* ProductData;
typedef void* ProductManager;
typedef void* ProductNodeGroup;
typedef void* RGBChannelDef;
typedef void* RasterDataNode;
typedef void* SampleCoding;
typedef void* TiePointGrid;
typedef void* VectorDataNode;
typedef void* GPF;
typedef void* Operator;
typedef void* OperatorException;
typedef void* OperatorSpi;
typedef void* OperatorSpiRegistry;
typedef void* Tile;
typedef void* Tile_Pos;
typedef void* ProductUtils;


typedef unsigned char boolean;
typedef long long dlong;

int beam_init_vm();

/* Non-API classes used in the API */
typedef void* Shape;
typedef void* ProductManager_Listener;
typedef void* MapTransform;
typedef void* ImageInfo_HistogramMatching;
typedef void* Parser;
typedef void* AffineTransform;
typedef void* Mask;
typedef void* Double;
typedef void* Term;
typedef void* Class;
typedef void* ServiceRegistry;
typedef void* FeatureCollection;
typedef void* Rectangle;
typedef void* Dimension;
typedef void* Stx;
typedef void* ProductNode;
typedef void* ImageOutputStream;
typedef void* SimpleFeatureType;
typedef void* ProductData_UTC;
typedef void* Object;
typedef void* ReferencedEnvelope;
typedef void* ProductReaderPlugIn;
typedef void* Integer;
typedef void* RenderedImage;
typedef void* IndexValidator;
typedef void* Area;
typedef void* Iterator;
typedef void* ComponentColorModel;
typedef void* MathTransform;
typedef void* CoordinateReferenceSystem;
typedef void* ProductWriterPlugIn;
typedef void* File;
typedef void* MapProjection;
typedef void* IndexColorModel;
typedef void* ProductNodeListener;
typedef void* Map;
typedef void* Color;
typedef void* Product_AutoGrouping;
typedef void* Pointing;
typedef void* PlacemarkDescriptor;
typedef void* PointingFactory;
typedef void* TransectProfileData;
typedef void* Point2D;
typedef void* ProductVisitor;
typedef void* T;
typedef void* Scaling;
typedef void* WritableNamespace;
typedef void* MultiLevelImage;
typedef void* ROI;
typedef void* Collection;
typedef void* GeoTIFFMetadata;
typedef void* MapInfo;
typedef void* Histogram;
typedef void* BufferedImage;
typedef void* SimpleFeature;
typedef void* ProductSubsetDef;
typedef void* BorderExtender;
typedef void* Logger;
typedef void* ProgressMonitor;
typedef void* Mask_ImageType;
typedef void* GeneralPath;
typedef void* ImageInputStream;
typedef void* RenderingHints;


/* Functions for class ProductIO */

ProductReader ProductIO_getProductReader(const char* formatName);
char* ProductIO_getProductWriterExtensions(const char* formatName);
ProductWriter ProductIO_getProductWriter(const char* formatName);
Product ProductIO_readProduct1(File file, const char* formatNames);
Product ProductIO_readProduct2(const char* filePath);
Product ProductIO_readProduct3(File file);
ProductReader ProductIO_getProductReaderForInput(Object input);
void ProductIO_writeProduct1(Product product, const char* filePath, const char* formatName);
void ProductIO_writeProduct2(Product product, const char* filePath, const char* formatName, ProgressMonitor pm);
void ProductIO_writeProduct3(Product product, File file, const char* formatName, boolean incremental);
void ProductIO_writeProduct4(Product product, File file, const char* formatName, boolean incremental, ProgressMonitor pm);

/* Functions for class ProductReader */

ProductReaderPlugIn ProductReader_getReaderPlugIn(ProductReader _self);
Object ProductReader_getInput(ProductReader _self);
ProductSubsetDef ProductReader_getSubsetDef(ProductReader _self);
Product ProductReader_readProductNodes(ProductReader _self, Object input, ProductSubsetDef subsetDef);
void ProductReader_readBandRasterData(ProductReader _self, Band destBand, int destOffsetX, int destOffsetY, int destWidth, int destHeight, ProductData destBuffer, ProgressMonitor pm);
void ProductReader_close(ProductReader _self);

/* Functions for class ProductWriter */

ProductWriterPlugIn ProductWriter_getWriterPlugIn(ProductWriter _self);
Object ProductWriter_getOutput(ProductWriter _self);
void ProductWriter_writeProductNodes(ProductWriter _self, Product product, Object output);
void ProductWriter_writeBandRasterData(ProductWriter _self, Band sourceBand, int sourceOffsetX, int sourceOffsetY, int sourceWidth, int sourceHeight, ProductData sourceBuffer, ProgressMonitor pm);
void ProductWriter_flush(ProductWriter _self);
void ProductWriter_close(ProductWriter _self);
boolean ProductWriter_shouldWrite(ProductWriter _self, ProductNode node);
boolean ProductWriter_isIncrementalMode(ProductWriter _self);
void ProductWriter_setIncrementalMode(ProductWriter _self, boolean enabled);
void ProductWriter_deleteOutput(ProductWriter _self);
void ProductWriter_removeBand(ProductWriter _self, Band band);

/* Functions for class AngularDirection */

boolean AngularDirection_equals(AngularDirection _self, Object obj);
char* AngularDirection_toString(AngularDirection _self);

/* Functions for class Band */

FlagCoding Band_getFlagCoding(Band _self);
boolean Band_isFlagBand(Band _self);
IndexCoding Band_getIndexCoding(Band _self);
boolean Band_isIndexBand(Band _self);
SampleCoding Band_getSampleCoding(Band _self);
void Band_setSampleCoding(Band _self, SampleCoding sampleCoding);
int Band_getSpectralBandIndex(Band _self);
void Band_setSpectralBandIndex(Band _self, int spectralBandIndex);
float Band_getSpectralWavelength(Band _self);
void Band_setSpectralWavelength(Band _self, float spectralWavelength);
float Band_getSpectralBandwidth(Band _self);
void Band_setSpectralBandwidth(Band _self, float spectralBandwidth);
float Band_getSolarFlux(Band _self);
void Band_setSolarFlux(Band _self, float solarFlux);
void Band_readRasterData(Band _self, int offsetX, int offsetY, int width, int height, ProductData rasterData, ProgressMonitor pm);
void Band_readRasterDataFully(Band _self, ProgressMonitor pm);
void Band_writeRasterData(Band _self, int offsetX, int offsetY, int width, int height, ProductData rasterData, ProgressMonitor pm);
void Band_writeRasterDataFully(Band _self, ProgressMonitor pm);
dlong Band_getRawStorageSize(Band _self, ProductSubsetDef subsetDef);
void Band_acceptVisitor(Band _self, ProductVisitor visitor);
char* Band_toString(Band _self);
void Band_removeFromFile(Band _self, ProductWriter productWriter);
ImageInfo Band_createDefaultImageInfo(Band _self, double histoSkipAreas, ProgressMonitor pm);
void Band_dispose(Band _self);

/* Functions for class ColorPaletteDef */

boolean ColorPaletteDef_isDiscrete(ColorPaletteDef _self);
void ColorPaletteDef_setDiscrete(ColorPaletteDef _self, boolean discrete);
int ColorPaletteDef_getNumColors(ColorPaletteDef _self);
void ColorPaletteDef_setNumColors(ColorPaletteDef _self, int numColors);
int ColorPaletteDef_getNumPoints(ColorPaletteDef _self);
void ColorPaletteDef_setNumPoints(ColorPaletteDef _self, int numPoints);
boolean ColorPaletteDef_isAutoDistribute(ColorPaletteDef _self);
void ColorPaletteDef_setAutoDistribute(ColorPaletteDef _self, boolean autoDistribute);
ColorPaletteDef_Point ColorPaletteDef_getPointAt(ColorPaletteDef _self, int index);
ColorPaletteDef_Point ColorPaletteDef_getFirstPoint(ColorPaletteDef _self);
ColorPaletteDef_Point ColorPaletteDef_getLastPoint(ColorPaletteDef _self);
double ColorPaletteDef_getMinDisplaySample(ColorPaletteDef _self);
double ColorPaletteDef_getMaxDisplaySample(ColorPaletteDef _self);
void ColorPaletteDef_insertPointAfter(ColorPaletteDef _self, int index, ColorPaletteDef_Point point);
boolean ColorPaletteDef_createPointAfter(ColorPaletteDef _self, int index, Scaling scaling);
Color ColorPaletteDef_getCenterColor(Color c1, Color c2);
void ColorPaletteDef_removePointAt(ColorPaletteDef _self, int index);
void ColorPaletteDef_addPoint(ColorPaletteDef _self, ColorPaletteDef_Point point);
ColorPaletteDef_Point ColorPaletteDef_getPoints(ColorPaletteDef _self);
void ColorPaletteDef_setPoints(ColorPaletteDef _self, ColorPaletteDef_Point points);
Iterator ColorPaletteDef_getIterator(ColorPaletteDef _self);
Object ColorPaletteDef_clone(ColorPaletteDef _self);
ColorPaletteDef ColorPaletteDef_createDeepCopy(ColorPaletteDef _self);
ColorPaletteDef ColorPaletteDef_loadColorPaletteDef(File file);
void ColorPaletteDef_storeColorPaletteDef(ColorPaletteDef colorPaletteDef, File file);
void ColorPaletteDef_dispose(ColorPaletteDef _self);
Color ColorPaletteDef_getColors(ColorPaletteDef _self);
Color ColorPaletteDef_createColorPalette(ColorPaletteDef _self, Scaling scaling);
Color ColorPaletteDef_computeColor(ColorPaletteDef _self, Scaling scaling, double sample);

/* Functions for class ColorPaletteDef_Point */

double ColorPaletteDef_Point_getSample(ColorPaletteDef_Point _self);
void ColorPaletteDef_Point_setSample(ColorPaletteDef_Point _self, double sample);
Color ColorPaletteDef_Point_getColor(ColorPaletteDef_Point _self);
void ColorPaletteDef_Point_setColor(ColorPaletteDef_Point _self, Color color);
char* ColorPaletteDef_Point_getLabel(ColorPaletteDef_Point _self);
void ColorPaletteDef_Point_setLabel(ColorPaletteDef_Point _self, const char* label);
Object ColorPaletteDef_Point_clone(ColorPaletteDef_Point _self);
ColorPaletteDef_Point ColorPaletteDef_Point_createClone(ColorPaletteDef_Point _self);

/* Functions for class FlagCoding */

MetadataAttribute FlagCoding_getFlag(FlagCoding _self, const char* name);
char* FlagCoding_getFlagNames(FlagCoding _self);
MetadataAttribute FlagCoding_addFlag(FlagCoding _self, const char* name, int flagMask, const char* description);
int FlagCoding_getFlagMask(FlagCoding _self, const char* name);
void FlagCoding_acceptVisitor(FlagCoding _self, ProductVisitor visitor);

/* Functions for class GeoCoding */

boolean GeoCoding_isCrossingMeridianAt180(GeoCoding _self);
boolean GeoCoding_canGetPixelPos(GeoCoding _self);
boolean GeoCoding_canGetGeoPos(GeoCoding _self);
PixelPos GeoCoding_getPixelPos(GeoCoding _self, GeoPos geoPos, PixelPos pixelPos);
GeoPos GeoCoding_getGeoPos(GeoCoding _self, PixelPos pixelPos, GeoPos geoPos);
void GeoCoding_dispose(GeoCoding _self);
CoordinateReferenceSystem GeoCoding_getImageCRS(GeoCoding _self);
CoordinateReferenceSystem GeoCoding_getMapCRS(GeoCoding _self);
CoordinateReferenceSystem GeoCoding_getGeoCRS(GeoCoding _self);
MathTransform GeoCoding_getImageToMapTransform(GeoCoding _self);

/* Functions for class GeoPos */

float GeoPos_getLat(GeoPos _self);
float GeoPos_getLon(GeoPos _self);
void GeoPos_setLocation(GeoPos _self, float lat, float lon);
boolean GeoPos_isValid(GeoPos _self);
boolean GeoPos_areValid(GeoPos a);
void GeoPos_setInvalid(GeoPos _self);
boolean GeoPos_equals(GeoPos _self, Object obj);
int GeoPos_hashCode(GeoPos _self);
char* GeoPos_toString(GeoPos _self);
void GeoPos_normalize(GeoPos _self);
float GeoPos_normalizeLon(float lon);
char* GeoPos_getLatString1(GeoPos _self);
char* GeoPos_getLonString1(GeoPos _self);
char* GeoPos_getLatString2(float lat);
char* GeoPos_getLonString2(float lon);

/* Functions for class ImageGeometry */

AffineTransform ImageGeometry_getImage2MapTransform(ImageGeometry _self);
Rectangle ImageGeometry_getImageRect(ImageGeometry _self);
CoordinateReferenceSystem ImageGeometry_getMapCrs(ImageGeometry _self);
void ImageGeometry_changeYAxisDirection(ImageGeometry _self);
Point2D ImageGeometry_calculateEastingNorthing(Product sourceProduct, CoordinateReferenceSystem targetCrs, double referencePixelX, double referencePixelY, double pixelSizeX, double pixelSizeY);
Rectangle ImageGeometry_calculateProductSize(Product sourceProduct, CoordinateReferenceSystem targetCrs, double pixelSizeX, double pixelSizeY);
ImageGeometry ImageGeometry_createTargetGeometry(Product sourceProduct, CoordinateReferenceSystem targetCrs, Double pixelSizeX, Double pixelSizeY, Integer width, Integer height, Double orientation, Double easting, Double northing, Double referencePixelX, Double referencePixelY);
ImageGeometry ImageGeometry_createCollocationTargetGeometry(Product targetProduct, Product collocationProduct);

/* Functions for class ImageInfo */

ColorPaletteDef ImageInfo_getColorPaletteDef(ImageInfo _self);
RGBChannelDef ImageInfo_getRgbChannelDef(ImageInfo _self);
Color ImageInfo_getNoDataColor(ImageInfo _self);
void ImageInfo_setNoDataColor(ImageInfo _self, Color noDataColor);
ImageInfo_HistogramMatching ImageInfo_getHistogramMatching1(ImageInfo _self);
void ImageInfo_setHistogramMatching(ImageInfo _self, ImageInfo_HistogramMatching histogramMatching);
boolean ImageInfo_isLogScaled(ImageInfo _self);
void ImageInfo_setLogScaled(ImageInfo _self, boolean logScaled);
Color ImageInfo_getColors(ImageInfo _self);
int ImageInfo_getColorComponentCount(ImageInfo _self);
IndexColorModel ImageInfo_createIndexColorModel(ImageInfo _self, Scaling scaling);
ComponentColorModel ImageInfo_createComponentColorModel(ImageInfo _self);
Object ImageInfo_clone(ImageInfo _self);
ImageInfo ImageInfo_createDeepCopy(ImageInfo _self);
void ImageInfo_dispose(ImageInfo _self);
void ImageInfo_setColors(ImageInfo _self, Color colors);
void ImageInfo_setColorPaletteDef(ImageInfo _self, ColorPaletteDef colorPaletteDef, double minSample, double maxSample, boolean autoDistribute);
ImageInfo_HistogramMatching ImageInfo_getHistogramMatching2(const char* mode);

/* Functions for class IndexCoding */

MetadataAttribute IndexCoding_getIndex(IndexCoding _self, const char* name);
char* IndexCoding_getIndexNames(IndexCoding _self);
MetadataAttribute IndexCoding_addIndex(IndexCoding _self, const char* name, int value, const char* description);
int IndexCoding_getIndexValue(IndexCoding _self, const char* name);
void IndexCoding_acceptVisitor(IndexCoding _self, ProductVisitor visitor);

/* Functions for class MetadataAttribute */

MetadataElement MetadataAttribute_getParentElement(MetadataAttribute _self);
boolean MetadataAttribute_equals(MetadataAttribute _self, Object object);
void MetadataAttribute_acceptVisitor(MetadataAttribute _self, ProductVisitor visitor);
MetadataAttribute MetadataAttribute_createDeepClone(MetadataAttribute _self);

/* Functions for class MetadataElement */

ProductNodeGroup MetadataElement_getElementGroup(MetadataElement _self);
MetadataElement MetadataElement_getParentElement(MetadataElement _self);
void MetadataElement_addElement(MetadataElement _self, MetadataElement element);
void MetadataElement_addElementAt(MetadataElement _self, MetadataElement element, int index);
boolean MetadataElement_removeElement(MetadataElement _self, MetadataElement element);
int MetadataElement_getNumElements(MetadataElement _self);
MetadataElement MetadataElement_getElementAt(MetadataElement _self, int index);
char* MetadataElement_getElementNames(MetadataElement _self);
MetadataElement MetadataElement_getElements(MetadataElement _self);
MetadataElement MetadataElement_getElement(MetadataElement _self, const char* name);
boolean MetadataElement_containsElement(MetadataElement _self, const char* name);
int MetadataElement_getElementIndex(MetadataElement _self, MetadataElement element);
void MetadataElement_addAttribute(MetadataElement _self, MetadataAttribute attribute);
boolean MetadataElement_removeAttribute(MetadataElement _self, MetadataAttribute attribute);
int MetadataElement_getNumAttributes(MetadataElement _self);
MetadataAttribute MetadataElement_getAttributeAt(MetadataElement _self, int index);
char* MetadataElement_getAttributeNames(MetadataElement _self);
MetadataAttribute MetadataElement_getAttributes(MetadataElement _self);
MetadataAttribute MetadataElement_getAttribute(MetadataElement _self, const char* name);
boolean MetadataElement_containsAttribute(MetadataElement _self, const char* name);
int MetadataElement_getAttributeIndex(MetadataElement _self, MetadataAttribute attribute);
double MetadataElement_getAttributeDouble1(MetadataElement _self, const char* name, double defaultValue);
double MetadataElement_getAttributeDouble2(MetadataElement _self, const char* name);
ProductData_UTC MetadataElement_getAttributeUTC1(MetadataElement _self, const char* name, ProductData_UTC defaultValue);
ProductData_UTC MetadataElement_getAttributeUTC2(MetadataElement _self, const char* name);
int MetadataElement_getAttributeInt1(MetadataElement _self, const char* name, int defaultValue);
int MetadataElement_getAttributeInt2(MetadataElement _self, const char* name);
void MetadataElement_setAttributeInt(MetadataElement _self, const char* name, int value);
void MetadataElement_setAttributeDouble(MetadataElement _self, const char* name, double value);
void MetadataElement_setAttributeUTC(MetadataElement _self, const char* name, ProductData_UTC value);
char* MetadataElement_getAttributeString1(MetadataElement _self, const char* name);
char* MetadataElement_getAttributeString2(MetadataElement _self, const char* name, const char* defaultValue);
void MetadataElement_setAttributeString(MetadataElement _self, const char* name, const char* value);
void MetadataElement_setModified(MetadataElement _self, boolean modified);
void MetadataElement_acceptVisitor(MetadataElement _self, ProductVisitor visitor);
dlong MetadataElement_getRawStorageSize(MetadataElement _self, ProductSubsetDef subsetDef);
MetadataElement MetadataElement_createDeepClone(MetadataElement _self);
void MetadataElement_dispose(MetadataElement _self);

/* Functions for class PixelPos */

boolean PixelPos_isValid(PixelPos _self);
void PixelPos_setInvalid(PixelPos _self);

/* Functions for class Placemark */

Placemark Placemark_createPointPlacemark(PlacemarkDescriptor descriptor, const char* name, const char* label, const char* text, PixelPos pixelPos, GeoPos geoPos, GeoCoding geoCoding);
PlacemarkDescriptor Placemark_getDescriptor(Placemark _self);
SimpleFeature Placemark_getFeature(Placemark _self);
Object Placemark_getAttributeValue(Placemark _self, const char* attributeName);
void Placemark_setAttributeValue(Placemark _self, const char* attributeName, Object attributeValue);
void Placemark_setLabel(Placemark _self, const char* label);
char* Placemark_getLabel(Placemark _self);
void Placemark_setText(Placemark _self, const char* text);
char* Placemark_getText(Placemark _self);
void Placemark_setStyleCss(Placemark _self, const char* styleCss);
char* Placemark_getStyleCss(Placemark _self);
dlong Placemark_getRawStorageSize(Placemark _self, ProductSubsetDef subsetDef);
void Placemark_acceptVisitor(Placemark _self, ProductVisitor visitor);
PixelPos Placemark_getPixelPos(Placemark _self);
void Placemark_setPixelPos(Placemark _self, PixelPos pixelPos);
GeoPos Placemark_getGeoPos(Placemark _self);
void Placemark_setGeoPos(Placemark _self, GeoPos geoPos);
void Placemark_updatePositions(Placemark _self);
SimpleFeatureType Placemark_createPinFeatureType();
SimpleFeatureType Placemark_createGcpFeatureType();
SimpleFeatureType Placemark_createGeometryFeatureType();
SimpleFeatureType Placemark_createPointFeatureType(const char* name);

/* Functions for class PlacemarkGroup */

VectorDataNode PlacemarkGroup_getVectorDataNode(PlacemarkGroup _self);
Placemark PlacemarkGroup_getPlacemark(PlacemarkGroup _self, SimpleFeature feature);
boolean PlacemarkGroup_add1(PlacemarkGroup _self, Placemark placemark);
void PlacemarkGroup_add2(PlacemarkGroup _self, int index, Placemark placemark);
boolean PlacemarkGroup_remove(PlacemarkGroup _self, Placemark placemark);
void PlacemarkGroup_dispose(PlacemarkGroup _self);

/* Functions for class Product */

File Product_getFileLocation(Product _self);
void Product_setFileLocation(Product _self, File fileLocation);
char* Product_getProductType(Product _self);
void Product_setProductType(Product _self, const char* productType);
void Product_setProductReader(Product _self, ProductReader reader);
ProductReader Product_getProductReader(Product _self);
void Product_setProductWriter(Product _self, ProductWriter writer);
ProductWriter Product_getProductWriter(Product _self);
void Product_writeHeader(Product _self, Object output);
void Product_closeProductReader(Product _self);
void Product_closeProductWriter(Product _self);
void Product_closeIO(Product _self);
void Product_dispose(Product _self);
PointingFactory Product_getPointingFactory(Product _self);
void Product_setPointingFactory(Product _self, PointingFactory pointingFactory);
void Product_setGeoCoding(Product _self, GeoCoding geoCoding);
GeoCoding Product_getGeoCoding(Product _self);
boolean Product_isUsingSingleGeoCoding(Product _self);
boolean Product_transferGeoCodingTo(Product _self, Product destProduct, ProductSubsetDef subsetDef);
int Product_getSceneRasterWidth(Product _self);
int Product_getSceneRasterHeight(Product _self);
ProductData_UTC Product_getStartTime(Product _self);
void Product_setStartTime(Product _self, ProductData_UTC startTime);
ProductData_UTC Product_getEndTime(Product _self);
void Product_setEndTime(Product _self, ProductData_UTC endTime);
MetadataElement Product_getMetadataRoot(Product _self);
ProductNodeGroup Product_getBandGroup(Product _self);
ProductNodeGroup Product_getTiePointGridGroup(Product _self);
void Product_addTiePointGrid(Product _self, TiePointGrid tiePointGrid);
boolean Product_removeTiePointGrid(Product _self, TiePointGrid tiePointGrid);
int Product_getNumTiePointGrids(Product _self);
TiePointGrid Product_getTiePointGridAt(Product _self, int index);
char* Product_getTiePointGridNames(Product _self);
TiePointGrid Product_getTiePointGrids(Product _self);
TiePointGrid Product_getTiePointGrid(Product _self, const char* name);
boolean Product_containsTiePointGrid(Product _self, const char* name);
void Product_addBand1(Product _self, Band band);
Band Product_addBand2(Product _self, const char* bandName, int dataType);
Band Product_addBand3(Product _self, const char* bandName, const char* expression);
Band Product_addBand4(Product _self, const char* bandName, const char* expression, int dataType);
boolean Product_removeBand(Product _self, Band band);
int Product_getNumBands(Product _self);
Band Product_getBandAt(Product _self, int index);
char* Product_getBandNames(Product _self);
Band Product_getBands(Product _self);
Band Product_getBand(Product _self, const char* name);
int Product_getBandIndex(Product _self, const char* name);
boolean Product_containsBand(Product _self, const char* name);
boolean Product_containsRasterDataNode(Product _self, const char* name);
RasterDataNode Product_getRasterDataNode(Product _self, const char* name);
ProductNodeGroup Product_getMaskGroup(Product _self);
ProductNodeGroup Product_getVectorDataGroup(Product _self);
ProductNodeGroup Product_getFlagCodingGroup(Product _self);
ProductNodeGroup Product_getIndexCodingGroup(Product _self);
boolean Product_containsPixel1(Product _self, float x, float y);
boolean Product_containsPixel2(Product _self, PixelPos pixelPos);
PlacemarkGroup Product_getGcpGroup(Product _self);
PlacemarkGroup Product_getPinGroup(Product _self);
boolean Product_isCompatibleProduct(Product _self, Product product, float eps);
Term Product_parseExpression(Product _self, const char* expression);
void Product_acceptVisitor(Product _self, ProductVisitor visitor);
boolean Product_addProductNodeListener(Product _self, ProductNodeListener listener);
void Product_removeProductNodeListener(Product _self, ProductNodeListener listener);
ProductNodeListener Product_getProductNodeListeners(Product _self);
int Product_getRefNo(Product _self);
void Product_setRefNo(Product _self, int refNo);
void Product_resetRefNo(Product _self);
ProductManager Product_getProductManager(Product _self);
boolean Product_isCompatibleBandArithmeticExpression1(Product _self, const char* expression);
boolean Product_isCompatibleBandArithmeticExpression2(Product _self, const char* expression, Parser parser);
Parser Product_createBandArithmeticParser(Product _self);
WritableNamespace Product_createBandArithmeticDefaultNamespace(Product _self);
Product Product_createSubset(Product _self, ProductSubsetDef subsetDef, const char* name, const char* desc);
Product Product_createProjectedProduct(Product _self, MapInfo mapInfo, const char* name, const char* desc);
Product Product_createFlippedProduct(Product _self, int flipType, const char* name, const char* desc);
void Product_setModified(Product _self, boolean modified);
dlong Product_getRawStorageSize(Product _self, ProductSubsetDef subsetDef);
char* Product_getQuicklookBandName(Product _self);
void Product_setQuicklookBandName(Product _self, const char* quicklookBandName);
char* Product_createPixelInfoString(Product _self, int pixelX, int pixelY);
ProductNode Product_getRemovedChildNodes(Product _self);
boolean Product_canBeOrthorectified(Product _self);
Dimension Product_getPreferredTileSize(Product _self);
void Product_setPreferredTileSize1(Product _self, int tileWidth, int tileHeight);
void Product_setPreferredTileSize2(Product _self, Dimension preferredTileSize);
char* Product_getAllFlagNames(Product _self);
Product_AutoGrouping Product_getAutoGrouping(Product _self);
void Product_setAutoGrouping1(Product _self, Product_AutoGrouping autoGrouping);
void Product_setAutoGrouping2(Product _self, const char* pattern);
Mask Product_addMask1(Product _self, const char* maskName, Mask_ImageType imageType);
Mask Product_addMask2(Product _self, const char* maskName, const char* expression, const char* description, Color color, double transparency);
Mask Product_addMask3(Product _self, const char* maskName, VectorDataNode vectorDataNode, const char* description, Color color, double transparency);

/* Functions for class ProductData */

ProductData ProductData_createInstance1(int type);
ProductData ProductData_createInstance2(int type, int numElems);
ProductData ProductData_createInstance3(int type, Object data);
ProductData ProductData_createInstance4(char elems);
ProductData ProductData_createUnsignedInstance1(char elems);
ProductData ProductData_createInstance5(short elems);
ProductData ProductData_createUnsignedInstance2(short elems);
ProductData ProductData_createInstance6(int elems);
ProductData ProductData_createUnsignedInstance3(int elems);
ProductData ProductData_createInstance7(dlong elems);
ProductData ProductData_createInstance8(const char* strData);
ProductData ProductData_createInstance9(float elems);
ProductData ProductData_createInstance10(double elems);
int ProductData_getType1(ProductData _self);
int ProductData_getElemSize1(int type);
int ProductData_getElemSize2(ProductData _self);
char* ProductData_getTypeString1(int type);
int ProductData_getType2(const char* type);
char* ProductData_getTypeString2(ProductData _self);
boolean ProductData_isInt(ProductData _self);
boolean ProductData_isIntType(int type);
boolean ProductData_isSigned(ProductData _self);
boolean ProductData_isUnsigned(ProductData _self);
boolean ProductData_isUIntType(int type);
boolean ProductData_isFloatingPointType(int type);
boolean ProductData_isScalar(ProductData _self);
int ProductData_getNumElems(ProductData _self);
int ProductData_getElemInt(ProductData _self);
dlong ProductData_getElemUInt(ProductData _self);
float ProductData_getElemFloat(ProductData _self);
double ProductData_getElemDouble(ProductData _self);
char* ProductData_getElemString(ProductData _self);
boolean ProductData_getElemBoolean(ProductData _self);
int ProductData_getElemIntAt(ProductData _self, int index);
dlong ProductData_getElemUIntAt(ProductData _self, int index);
float ProductData_getElemFloatAt(ProductData _self, int index);
double ProductData_getElemDoubleAt(ProductData _self, int index);
char* ProductData_getElemStringAt(ProductData _self, int index);
boolean ProductData_getElemBooleanAt(ProductData _self, int index);
void ProductData_setElemInt(ProductData _self, int value);
void ProductData_setElemUInt(ProductData _self, dlong value);
void ProductData_setElemFloat(ProductData _self, float value);
void ProductData_setElemDouble(ProductData _self, double value);
void ProductData_setElemString(ProductData _self, const char* value);
void ProductData_setElemBoolean(ProductData _self, boolean value);
void ProductData_setElemIntAt(ProductData _self, int index, int value);
void ProductData_setElemUIntAt(ProductData _self, int index, dlong value);
void ProductData_setElemFloatAt(ProductData _self, int index, float value);
void ProductData_setElemDoubleAt(ProductData _self, int index, double value);
void ProductData_setElemStringAt(ProductData _self, int index, const char* value);
void ProductData_setElemBooleanAt(ProductData _self, int index, boolean value);
Object ProductData_getElems(ProductData _self);
void ProductData_setElems(ProductData _self, Object data);
void ProductData_readFrom1(ProductData _self, ImageInputStream input);
void ProductData_readFrom2(ProductData _self, int pos, ImageInputStream input);
void ProductData_readFrom3(ProductData _self, int startPos, int numElems, ImageInputStream input);
void ProductData_readFrom4(ProductData _self, int startPos, int numElems, ImageInputStream input, dlong inputPos);
void ProductData_writeTo1(ProductData _self, ImageOutputStream output);
void ProductData_writeTo2(ProductData _self, int pos, ImageOutputStream output);
void ProductData_writeTo3(ProductData _self, int startPos, int numElems, ImageOutputStream output);
void ProductData_writeTo4(ProductData _self, int startPos, int numElems, ImageOutputStream output, dlong outputPos);
char* ProductData_toString(ProductData _self);
int ProductData_hashCode(ProductData _self);
boolean ProductData_equals(ProductData _self, Object other);
boolean ProductData_equalElems(ProductData _self, ProductData other);
void ProductData_dispose(ProductData _self);

/* Functions for class ProductManager */

int ProductManager_getProductCount(ProductManager _self);
Product ProductManager_getProduct1(ProductManager _self, int index);
char* ProductManager_getProductDisplayNames(ProductManager _self);
char* ProductManager_getProductNames(ProductManager _self);
Product ProductManager_getProducts(ProductManager _self);
Product ProductManager_getProductByDisplayName(ProductManager _self, const char* displayName);
Product ProductManager_getProductByRefNo(ProductManager _self, int refNo);
Product ProductManager_getProduct2(ProductManager _self, const char* name);
int ProductManager_getProductIndex(ProductManager _self, Product product);
boolean ProductManager_containsProduct(ProductManager _self, const char* name);
boolean ProductManager_contains(ProductManager _self, Product product);
void ProductManager_addProduct(ProductManager _self, Product product);
boolean ProductManager_removeProduct(ProductManager _self, Product product);
void ProductManager_removeAllProducts(ProductManager _self);
boolean ProductManager_addListener(ProductManager _self, ProductManager_Listener listener);
boolean ProductManager_removeListener(ProductManager _self, ProductManager_Listener listener);

/* Functions for class ProductNodeGroup */

boolean ProductNodeGroup_isTakingOverNodeOwnership(ProductNodeGroup _self);
int ProductNodeGroup_getNodeCount(ProductNodeGroup _self);
T ProductNodeGroup_get1(ProductNodeGroup _self, int index);
char* ProductNodeGroup_getNodeDisplayNames(ProductNodeGroup _self);
char* ProductNodeGroup_getNodeNames(ProductNodeGroup _self);
ProductNode ProductNodeGroup_toArray1(ProductNodeGroup _self);
T ProductNodeGroup_toArray2(ProductNodeGroup _self, T array);
int ProductNodeGroup_indexOf1(ProductNodeGroup _self, const char* name);
int ProductNodeGroup_indexOf2(ProductNodeGroup _self, T element);
T ProductNodeGroup_getByDisplayName(ProductNodeGroup _self, const char* displayName);
T ProductNodeGroup_get2(ProductNodeGroup _self, const char* name);
boolean ProductNodeGroup_contains1(ProductNodeGroup _self, const char* name);
boolean ProductNodeGroup_contains2(ProductNodeGroup _self, T node);
boolean ProductNodeGroup_add1(ProductNodeGroup _self, T node);
void ProductNodeGroup_add2(ProductNodeGroup _self, int index, T node);
boolean ProductNodeGroup_remove(ProductNodeGroup _self, T node);
void ProductNodeGroup_removeAll(ProductNodeGroup _self);
void ProductNodeGroup_clearRemovedList(ProductNodeGroup _self);
Collection ProductNodeGroup_getRemovedNodes(ProductNodeGroup _self);
dlong ProductNodeGroup_getRawStorageSize(ProductNodeGroup _self, ProductSubsetDef subsetDef);
void ProductNodeGroup_setModified(ProductNodeGroup _self, boolean modified);
void ProductNodeGroup_acceptVisitor(ProductNodeGroup _self, ProductVisitor visitor);
void ProductNodeGroup_dispose(ProductNodeGroup _self);
void ProductNodeGroup_updateExpression(ProductNodeGroup _self, const char* oldExternalName, const char* newExternalName);

/* Functions for class RGBChannelDef */

char* RGBChannelDef_getSourceName(RGBChannelDef _self, int index);
void RGBChannelDef_setSourceName(RGBChannelDef _self, int index, const char* sourceName);
char* RGBChannelDef_getSourceNames(RGBChannelDef _self);
void RGBChannelDef_setSourceNames(RGBChannelDef _self, const char* bandNames);
boolean RGBChannelDef_isAlphaUsed(RGBChannelDef _self);
boolean RGBChannelDef_isGammaUsed(RGBChannelDef _self, int index);
double RGBChannelDef_getGamma(RGBChannelDef _self, int index);
void RGBChannelDef_setGamma(RGBChannelDef _self, int index, double gamma);
double RGBChannelDef_getMinDisplaySample(RGBChannelDef _self, int index);
void RGBChannelDef_setMinDisplaySample(RGBChannelDef _self, int index, double min);
double RGBChannelDef_getMaxDisplaySample(RGBChannelDef _self, int index);
void RGBChannelDef_setMaxDisplaySample(RGBChannelDef _self, int index, double max);
Object RGBChannelDef_clone(RGBChannelDef _self);

/* Functions for class RasterDataNode */

int RasterDataNode_getSceneRasterWidth(RasterDataNode _self);
int RasterDataNode_getSceneRasterHeight(RasterDataNode _self);
int RasterDataNode_getRasterWidth(RasterDataNode _self);
int RasterDataNode_getRasterHeight(RasterDataNode _self);
void RasterDataNode_setModified(RasterDataNode _self, boolean modified);
GeoCoding RasterDataNode_getGeoCoding(RasterDataNode _self);
void RasterDataNode_setGeoCoding(RasterDataNode _self, GeoCoding geoCoding);
Pointing RasterDataNode_getPointing(RasterDataNode _self);
boolean RasterDataNode_canBeOrthorectified(RasterDataNode _self);
boolean RasterDataNode_isFloatingPointType(RasterDataNode _self);
int RasterDataNode_getGeophysicalDataType(RasterDataNode _self);
double RasterDataNode_getScalingFactor(RasterDataNode _self);
void RasterDataNode_setScalingFactor(RasterDataNode _self, double scalingFactor);
double RasterDataNode_getScalingOffset(RasterDataNode _self);
void RasterDataNode_setScalingOffset(RasterDataNode _self, double scalingOffset);
boolean RasterDataNode_isLog10Scaled(RasterDataNode _self);
void RasterDataNode_setLog10Scaled(RasterDataNode _self, boolean log10Scaled);
boolean RasterDataNode_isScalingApplied(RasterDataNode _self);
boolean RasterDataNode_isValidMaskProperty(const char* propertyName);
boolean RasterDataNode_isNoDataValueSet(RasterDataNode _self);
void RasterDataNode_clearNoDataValue(RasterDataNode _self);
boolean RasterDataNode_isNoDataValueUsed(RasterDataNode _self);
void RasterDataNode_setNoDataValueUsed(RasterDataNode _self, boolean noDataValueUsed);
double RasterDataNode_getNoDataValue(RasterDataNode _self);
void RasterDataNode_setNoDataValue(RasterDataNode _self, double noDataValue);
double RasterDataNode_getGeophysicalNoDataValue(RasterDataNode _self);
void RasterDataNode_setGeophysicalNoDataValue(RasterDataNode _self, double noDataValue);
char* RasterDataNode_getValidPixelExpression(RasterDataNode _self);
void RasterDataNode_setValidPixelExpression(RasterDataNode _self, const char* validPixelExpression);
boolean RasterDataNode_isValidMaskUsed(RasterDataNode _self);
void RasterDataNode_resetValidMask(RasterDataNode _self);
char* RasterDataNode_getValidMaskExpression(RasterDataNode _self);
void RasterDataNode_updateExpression(RasterDataNode _self, const char* oldExternalName, const char* newExternalName);
ProductData RasterDataNode_getSceneRasterData(RasterDataNode _self);
boolean RasterDataNode_hasRasterData(RasterDataNode _self);
ProductData RasterDataNode_getRasterData(RasterDataNode _self);
void RasterDataNode_setRasterData(RasterDataNode _self, ProductData rasterData);
void RasterDataNode_loadRasterData1(RasterDataNode _self);
void RasterDataNode_loadRasterData2(RasterDataNode _self, ProgressMonitor pm);
void RasterDataNode_unloadRasterData(RasterDataNode _self);
void RasterDataNode_dispose(RasterDataNode _self);
boolean RasterDataNode_isPixelValid1(RasterDataNode _self, int x, int y);
int RasterDataNode_getSampleInt(RasterDataNode _self, int x, int y);
float RasterDataNode_getSampleFloat(RasterDataNode _self, int x, int y);
boolean RasterDataNode_isPixelValid2(RasterDataNode _self, int pixelIndex);
boolean RasterDataNode_isPixelValid3(RasterDataNode _self, int x, int y, ROI roi);
int RasterDataNode_getPixelInt(RasterDataNode _self, int x, int y);
float RasterDataNode_getPixelFloat(RasterDataNode _self, int x, int y);
double RasterDataNode_getPixelDouble(RasterDataNode _self, int x, int y);
void RasterDataNode_setPixelInt(RasterDataNode _self, int x, int y, int pixelValue);
void RasterDataNode_setPixelFloat(RasterDataNode _self, int x, int y, float pixelValue);
void RasterDataNode_setPixelDouble(RasterDataNode _self, int x, int y, double pixelValue);
int RasterDataNode_getPixels1(RasterDataNode _self, int x, int y, int w, int h, int pixels);
int RasterDataNode_getPixels2(RasterDataNode _self, int x, int y, int w, int h, int pixels, ProgressMonitor pm);
float RasterDataNode_getPixels3(RasterDataNode _self, int x, int y, int w, int h, float pixels);
float RasterDataNode_getPixels4(RasterDataNode _self, int x, int y, int w, int h, float pixels, ProgressMonitor pm);
double RasterDataNode_getPixels5(RasterDataNode _self, int x, int y, int w, int h, double pixels);
double RasterDataNode_getPixels6(RasterDataNode _self, int x, int y, int w, int h, double pixels, ProgressMonitor pm);
void RasterDataNode_setPixels1(RasterDataNode _self, int x, int y, int w, int h, int pixels);
void RasterDataNode_setPixels2(RasterDataNode _self, int x, int y, int w, int h, float pixels);
void RasterDataNode_setPixels3(RasterDataNode _self, int x, int y, int w, int h, double pixels);
int RasterDataNode_readPixels1(RasterDataNode _self, int x, int y, int w, int h, int pixels);
int RasterDataNode_readPixels2(RasterDataNode _self, int x, int y, int w, int h, int pixels, ProgressMonitor pm);
float RasterDataNode_readPixels3(RasterDataNode _self, int x, int y, int w, int h, float pixels);
float RasterDataNode_readPixels4(RasterDataNode _self, int x, int y, int w, int h, float pixels, ProgressMonitor pm);
double RasterDataNode_readPixels5(RasterDataNode _self, int x, int y, int w, int h, double pixels);
double RasterDataNode_readPixels6(RasterDataNode _self, int x, int y, int w, int h, double pixels, ProgressMonitor pm);
void RasterDataNode_writePixels1(RasterDataNode _self, int x, int y, int w, int h, int pixels);
void RasterDataNode_writePixels2(RasterDataNode _self, int x, int y, int w, int h, int pixels, ProgressMonitor pm);
void RasterDataNode_writePixels3(RasterDataNode _self, int x, int y, int w, int h, float pixels);
void RasterDataNode_writePixels4(RasterDataNode _self, int x, int y, int w, int h, float pixels, ProgressMonitor pm);
void RasterDataNode_writePixels5(RasterDataNode _self, int x, int y, int w, int h, double pixels);
void RasterDataNode_writePixels6(RasterDataNode _self, int x, int y, int w, int h, double pixels, ProgressMonitor pm);
boolean RasterDataNode_readValidMask(RasterDataNode _self, int x, int y, int w, int h, boolean validMask);
void RasterDataNode_readRasterDataFully1(RasterDataNode _self);
void RasterDataNode_readRasterDataFully2(RasterDataNode _self, ProgressMonitor pm);
void RasterDataNode_readRasterData1(RasterDataNode _self, int offsetX, int offsetY, int width, int height, ProductData rasterData);
void RasterDataNode_readRasterData2(RasterDataNode _self, int offsetX, int offsetY, int width, int height, ProductData rasterData, ProgressMonitor pm);
void RasterDataNode_writeRasterDataFully1(RasterDataNode _self);
void RasterDataNode_writeRasterDataFully2(RasterDataNode _self, ProgressMonitor pm);
void RasterDataNode_writeRasterData1(RasterDataNode _self, int offsetX, int offsetY, int width, int height, ProductData rasterData);
void RasterDataNode_writeRasterData2(RasterDataNode _self, int offsetX, int offsetY, int width, int height, ProductData rasterData, ProgressMonitor pm);
ProductData RasterDataNode_createCompatibleRasterData1(RasterDataNode _self);
ProductData RasterDataNode_createCompatibleSceneRasterData(RasterDataNode _self);
ProductData RasterDataNode_createCompatibleRasterData2(RasterDataNode _self, int width, int height);
boolean RasterDataNode_isCompatibleRasterData(RasterDataNode _self, ProductData rasterData, int w, int h);
void RasterDataNode_checkCompatibleRasterData(RasterDataNode _self, ProductData rasterData, int w, int h);
boolean RasterDataNode_hasIntPixels(RasterDataNode _self);
TransectProfileData RasterDataNode_createTransectProfileData(RasterDataNode _self, Shape shape);
void RasterDataNode_acceptVisitor(RasterDataNode _self, ProductVisitor visitor);
ImageInfo RasterDataNode_getImageInfo1(RasterDataNode _self);
void RasterDataNode_setImageInfo(RasterDataNode _self, ImageInfo imageInfo);
void RasterDataNode_fireImageInfoChanged(RasterDataNode _self);
ImageInfo RasterDataNode_getImageInfo2(RasterDataNode _self, ProgressMonitor pm);
ImageInfo RasterDataNode_getImageInfo3(RasterDataNode _self, double histoSkipAreas, ProgressMonitor pm);
ImageInfo RasterDataNode_createDefaultImageInfo1(RasterDataNode _self, double histoSkipAreas, ProgressMonitor pm);
ImageInfo RasterDataNode_createDefaultImageInfo2(RasterDataNode _self, double histoSkipAreas, Histogram histogram);
ProductNodeGroup RasterDataNode_getOverlayMaskGroup(RasterDataNode _self);
BufferedImage RasterDataNode_createColorIndexedImage(RasterDataNode _self, ProgressMonitor pm);
BufferedImage RasterDataNode_createRgbImage(RasterDataNode _self, ProgressMonitor pm);
char RasterDataNode_quantizeRasterData1(RasterDataNode _self, double newMin, double newMax, double gamma, ProgressMonitor pm);
void RasterDataNode_quantizeRasterData2(RasterDataNode _self, double newMin, double newMax, double gamma, char samples, int offset, int stride, ProgressMonitor pm);
IndexValidator RasterDataNode_createPixelValidator(RasterDataNode _self, int lineOffset, ROI roi);
double RasterDataNode_scale(RasterDataNode _self, double v);
double RasterDataNode_scaleInverse(RasterDataNode _self, double v);
char* RasterDataNode_getPixelString(RasterDataNode _self, int x, int y);
boolean RasterDataNode_isSourceImageSet(RasterDataNode _self);
MultiLevelImage RasterDataNode_getSourceImage(RasterDataNode _self);
void RasterDataNode_setSourceImage1(RasterDataNode _self, RenderedImage sourceImage);
void RasterDataNode_setSourceImage2(RasterDataNode _self, MultiLevelImage sourceImage);
boolean RasterDataNode_isGeophysicalImageSet(RasterDataNode _self);
MultiLevelImage RasterDataNode_getGeophysicalImage(RasterDataNode _self);
boolean RasterDataNode_isValidMaskImageSet(RasterDataNode _self);
MultiLevelImage RasterDataNode_getValidMaskImage(RasterDataNode _self);
boolean RasterDataNode_isStxSet(RasterDataNode _self);
Stx RasterDataNode_getStx1(RasterDataNode _self);
Stx RasterDataNode_getStx2(RasterDataNode _self, boolean accurate, ProgressMonitor pm);
void RasterDataNode_setStx(RasterDataNode _self, Stx stx);
Shape RasterDataNode_getValidShape(RasterDataNode _self);

/* Functions for class SampleCoding */

void SampleCoding_addElement(SampleCoding _self, MetadataElement element);
void SampleCoding_addAttribute(SampleCoding _self, MetadataAttribute attribute);
MetadataAttribute SampleCoding_addSample(SampleCoding _self, const char* name, int value, const char* description);
int SampleCoding_getSampleCount(SampleCoding _self);
char* SampleCoding_getSampleName(SampleCoding _self, int index);
int SampleCoding_getSampleValue(SampleCoding _self, int index);

/* Functions for class TiePointGrid */

int TiePointGrid_getDiscontinuity1(float tiePoints);
int TiePointGrid_getDiscontinuity2(TiePointGrid _self);
void TiePointGrid_setDiscontinuity(TiePointGrid _self, int discontinuity);
boolean TiePointGrid_isFloatingPointType(TiePointGrid _self);
int TiePointGrid_getGeophysicalDataType(TiePointGrid _self);
ProductData TiePointGrid_getSceneRasterData(TiePointGrid _self);
int TiePointGrid_getSceneRasterWidth(TiePointGrid _self);
int TiePointGrid_getSceneRasterHeight(TiePointGrid _self);
float TiePointGrid_getOffsetX(TiePointGrid _self);
float TiePointGrid_getOffsetY(TiePointGrid _self);
float TiePointGrid_getSubSamplingX(TiePointGrid _self);
float TiePointGrid_getSubSamplingY(TiePointGrid _self);
float TiePointGrid_getTiePoints(TiePointGrid _self);
int TiePointGrid_getPixelInt(TiePointGrid _self, int x, int y);
void TiePointGrid_dispose(TiePointGrid _self);
float TiePointGrid_getPixelFloat1(TiePointGrid _self, int x, int y);
float TiePointGrid_getPixelFloat2(TiePointGrid _self, float x, float y);
double TiePointGrid_getPixelDouble(TiePointGrid _self, int x, int y);
void TiePointGrid_setPixelInt(TiePointGrid _self, int x, int y, int pixelValue);
void TiePointGrid_setPixelFloat(TiePointGrid _self, int x, int y, float pixelValue);
void TiePointGrid_setPixelDouble(TiePointGrid _self, int x, int y, double pixelValue);
int TiePointGrid_getPixels1(TiePointGrid _self, int x, int y, int w, int h, int pixels, ProgressMonitor pm);
float TiePointGrid_getPixels2(TiePointGrid _self, int x, int y, int w, int h, float pixels, ProgressMonitor pm);
double TiePointGrid_getPixels3(TiePointGrid _self, int x, int y, int w, int h, double pixels, ProgressMonitor pm);
void TiePointGrid_setPixels1(TiePointGrid _self, int x, int y, int w, int h, int pixels);
void TiePointGrid_setPixels2(TiePointGrid _self, int x, int y, int w, int h, float pixels);
void TiePointGrid_setPixels3(TiePointGrid _self, int x, int y, int w, int h, double pixels);
int TiePointGrid_readPixels1(TiePointGrid _self, int x, int y, int w, int h, int pixels, ProgressMonitor pm);
float TiePointGrid_readPixels2(TiePointGrid _self, int x, int y, int w, int h, float pixels, ProgressMonitor pm);
double TiePointGrid_readPixels3(TiePointGrid _self, int x, int y, int w, int h, double pixels, ProgressMonitor pm);
void TiePointGrid_writePixels1(TiePointGrid _self, int x, int y, int w, int h, int pixels, ProgressMonitor pm);
void TiePointGrid_writePixels2(TiePointGrid _self, int x, int y, int w, int h, float pixels, ProgressMonitor pm);
void TiePointGrid_writePixels3(TiePointGrid _self, int x, int y, int w, int h, double pixels, ProgressMonitor pm);
void TiePointGrid_readRasterData(TiePointGrid _self, int offsetX, int offsetY, int width, int height, ProductData rasterData, ProgressMonitor pm);
void TiePointGrid_readRasterDataFully(TiePointGrid _self, ProgressMonitor pm);
void TiePointGrid_writeRasterData(TiePointGrid _self, int offsetX, int offsetY, int width, int height, ProductData rasterData, ProgressMonitor pm);
void TiePointGrid_writeRasterDataFully(TiePointGrid _self, ProgressMonitor pm);
void TiePointGrid_acceptVisitor(TiePointGrid _self, ProductVisitor visitor);
TiePointGrid TiePointGrid_cloneTiePointGrid(TiePointGrid _self);
TiePointGrid TiePointGrid_createZenithFromElevationAngleTiePointGrid(TiePointGrid elevationAngleGrid);
TiePointGrid TiePointGrid_createSubset(TiePointGrid sourceTiePointGrid, ProductSubsetDef subsetDef);

/* Functions for class VectorDataNode */

PlacemarkDescriptor VectorDataNode_getPlacemarkDescriptor(VectorDataNode _self);
PlacemarkGroup VectorDataNode_getPlacemarkGroup(VectorDataNode _self);
void VectorDataNode_setModified(VectorDataNode _self, boolean modified);
void VectorDataNode_fireFeaturesAdded(VectorDataNode _self, SimpleFeature features);
void VectorDataNode_fireFeaturesRemoved(VectorDataNode _self, SimpleFeature features);
void VectorDataNode_fireFeaturesChanged(VectorDataNode _self, SimpleFeature features);
SimpleFeatureType VectorDataNode_getFeatureType(VectorDataNode _self);
FeatureCollection VectorDataNode_getFeatureCollection(VectorDataNode _self);
ReferencedEnvelope VectorDataNode_getEnvelope(VectorDataNode _self);
dlong VectorDataNode_getRawStorageSize(VectorDataNode _self, ProductSubsetDef subsetDef);
char* VectorDataNode_getDefaultStyleCss(VectorDataNode _self);
void VectorDataNode_setDefaultStyleCss(VectorDataNode _self, const char* defaultStyleCss);
char* VectorDataNode_getStyleCss(VectorDataNode _self);
void VectorDataNode_setStyleCss(VectorDataNode _self, const char* styleCss);
void VectorDataNode_acceptVisitor(VectorDataNode _self, ProductVisitor visitor);
void VectorDataNode_dispose(VectorDataNode _self);
boolean VectorDataNode_isPermanent(VectorDataNode _self);
void VectorDataNode_setPermanent(VectorDataNode _self, boolean permanent);

/* Functions for class GPF */

Product GPF_createProduct1(const char* operatorName, Map parameters);
Product GPF_createProduct2(const char* operatorName, Map parameters, RenderingHints renderingHints);
Product GPF_createProduct3(const char* operatorName, Map parameters, Product sourceProduct);
Product GPF_createProduct4(const char* operatorName, Map parameters, Product sourceProduct, RenderingHints renderingHints);
Product GPF_createProduct5(const char* operatorName, Map parameters, Product sourceProducts);
Product GPF_createProduct6(const char* operatorName, Map parameters, Product sourceProducts, RenderingHints renderingHints);
Product GPF_createProduct7(const char* operatorName, Map parameters, Map sourceProducts);
Product GPF_createProduct8(const char* operatorName, Map parameters, Map sourceProducts, RenderingHints renderingHints);
Product GPF_createProductNS(GPF _self, const char* operatorName, Map parameters, Map sourceProducts, RenderingHints renderingHints);
Operator GPF_createOperator(GPF _self, const char* operatorName, Map parameters, Map sourceProducts, RenderingHints renderingHints);
OperatorSpiRegistry GPF_getOperatorSpiRegistry(GPF _self);
void GPF_setOperatorSpiRegistry(GPF _self, OperatorSpiRegistry spiRegistry);
GPF GPF_getDefaultInstance();
void GPF_setDefaultInstance(GPF defaultInstance);

/* Functions for class Operator */

void Operator_initialize(Operator _self);
void Operator_update(Operator _self);
void Operator_computeTile(Operator _self, Band targetBand, Tile targetTile, ProgressMonitor pm);
void Operator_computeTileStack(Operator _self, Map targetTiles, Rectangle targetRectangle, ProgressMonitor pm);
void Operator_dispose(Operator _self);
char* Operator_getId(Operator _self);
Product Operator_getSourceProducts(Operator _self);
void Operator_setSourceProducts(Operator _self, Product products);
Product Operator_getSourceProduct1(Operator _self);
void Operator_setSourceProduct1(Operator _self, Product sourceProduct);
Product Operator_getSourceProduct2(Operator _self, const char* id);
void Operator_setSourceProduct2(Operator _self, const char* id, Product product);
char* Operator_getSourceProductId(Operator _self, Product product);
Product Operator_getTargetProduct(Operator _self);
Object Operator_getTargetProperty(Operator _self, const char* name);
Object Operator_getParameter(Operator _self, const char* name);
void Operator_setParameter(Operator _self, const char* name, Object value);
Tile Operator_getSourceTile1(Operator _self, RasterDataNode rasterDataNode, Rectangle region);
Tile Operator_getSourceTile2(Operator _self, RasterDataNode rasterDataNode, Rectangle region, BorderExtender borderExtender);
Logger Operator_getLogger(Operator _self);
void Operator_stopTileComputationObservation(Operator _self);
void Operator_setLogger(Operator _self, Logger logger);
OperatorSpi Operator_getSpi(Operator _self);
void Operator_setSpi(Operator _self, OperatorSpi operatorSpi);

/* Functions for class OperatorException */


/* Functions for class OperatorSpi */

Operator OperatorSpi_createOperator1(OperatorSpi _self);
Operator OperatorSpi_createOperator2(OperatorSpi _self, Map parameters, Map sourceProducts);
Operator OperatorSpi_createOperator3(OperatorSpi _self, Map parameters, Map sourceProducts, RenderingHints renderingHints);
Class OperatorSpi_getOperatorClass(OperatorSpi _self);
char* OperatorSpi_getOperatorAlias1(OperatorSpi _self);
char* OperatorSpi_getOperatorAlias2(Class operatorClass);

/* Functions for class OperatorSpiRegistry */

void OperatorSpiRegistry_loadOperatorSpis(OperatorSpiRegistry _self);
ServiceRegistry OperatorSpiRegistry_getServiceRegistry(OperatorSpiRegistry _self);
OperatorSpi OperatorSpiRegistry_getOperatorSpi(OperatorSpiRegistry _self, const char* operatorName);
boolean OperatorSpiRegistry_addOperatorSpi(OperatorSpiRegistry _self, OperatorSpi operatorSpi);
boolean OperatorSpiRegistry_removeOperatorSpi(OperatorSpiRegistry _self, OperatorSpi operatorSpi);
void OperatorSpiRegistry_setAlias(OperatorSpiRegistry _self, const char* aliasName, const char* spiClassName);

/* Functions for class Tile */

RasterDataNode Tile_getRasterDataNode(Tile _self);
boolean Tile_isTarget(Tile _self);
float Tile_toGeoPhysical1(Tile _self, float rawSample);
double Tile_toGeoPhysical2(Tile _self, double rawSample);
float Tile_toRaw1(Tile _self, float sample);
double Tile_toRaw2(Tile _self, double sample);
Rectangle Tile_getRectangle(Tile _self);
int Tile_getMinX(Tile _self);
int Tile_getMaxX(Tile _self);
int Tile_getMinY(Tile _self);
int Tile_getMaxY(Tile _self);
int Tile_getWidth(Tile _self);
int Tile_getHeight(Tile _self);
int Tile_getDataBufferIndex(Tile _self, int x, int y);
ProductData Tile_getDataBuffer(Tile _self);
char Tile_getDataBufferByte(Tile _self);
short Tile_getDataBufferShort(Tile _self);
int Tile_getDataBufferInt(Tile _self);
float Tile_getDataBufferFloat(Tile _self);
double Tile_getDataBufferDouble(Tile _self);
int Tile_getScanlineOffset(Tile _self);
int Tile_getScanlineStride(Tile _self);
ProductData Tile_getRawSamples(Tile _self);
void Tile_setRawSamples(Tile _self, ProductData rawSamples);
int Tile_getSamplesInt(Tile _self);
float Tile_getSamplesFloat(Tile _self);
double Tile_getSamplesDouble(Tile _self);
void Tile_setSamples1(Tile _self, int samples);
void Tile_setSamples2(Tile _self, float samples);
void Tile_setSamples3(Tile _self, double samples);
boolean Tile_isSampleValid(Tile _self, int x, int y);
boolean Tile_getSampleBoolean(Tile _self, int x, int y);
void Tile_setSample1(Tile _self, int x, int y, boolean sample);
int Tile_getSampleInt(Tile _self, int x, int y);
void Tile_setSample2(Tile _self, int x, int y, int sample);
float Tile_getSampleFloat(Tile _self, int x, int y);
void Tile_setSample3(Tile _self, int x, int y, float sample);
double Tile_getSampleDouble(Tile _self, int x, int y);
void Tile_setSample4(Tile _self, int x, int y, double sample);
boolean Tile_getSampleBit(Tile _self, int x, int y, int bitIndex);
void Tile_setSample5(Tile _self, int x, int y, int bitIndex, boolean sample);
Iterator Tile_iterator(Tile _self);

/* Functions for class Tile_Pos */

boolean Tile_Pos_equals(Tile_Pos _self, Object obj);
int Tile_Pos_hashCode(Tile_Pos _self);
char* Tile_Pos_toString(Tile_Pos _self);

/* Functions for class ProductUtils */

ImageInfo ProductUtils_createImageInfo(RasterDataNode rasters, boolean assignMissingImageInfos, ProgressMonitor pm);
BufferedImage ProductUtils_createRgbImage(RasterDataNode rasters, ImageInfo imageInfo, ProgressMonitor pm);
BufferedImage ProductUtils_createColorIndexedImage(RasterDataNode rasterDataNode, ProgressMonitor pm);
MapInfo ProductUtils_createSuitableMapInfo1(Product product, Rectangle rect, MapProjection mapProjection);
MapInfo ProductUtils_createSuitableMapInfo2(Product product, MapProjection mapProjection, double orientation, double noDataValue);
Dimension ProductUtils_getOutputRasterSize(Product product, Rectangle rect, MapTransform mapTransform, double pixelSizeX, double pixelSizeY);
Point2D ProductUtils_createMapEnvelope1(Product product, Rectangle rect, MapTransform mapTransform);
Point2D ProductUtils_createMapEnvelope2(Product product, Rectangle rect, int step, MapTransform mapTransform);
Point2D ProductUtils_getMinMax(Point2D boundary);
Point2D ProductUtils_createMapBoundary(Product product, Rectangle rect, int step, MapTransform mapTransform);
GeoPos ProductUtils_createGeoBoundary1(Product product, int step);
GeoPos ProductUtils_createGeoBoundary2(Product product, Rectangle region, int step);
GeoPos ProductUtils_createGeoBoundary3(Product product, Rectangle region, int step, boolean usePixelCenter);
GeoPos ProductUtils_createGeoBoundary4(RasterDataNode raster, Rectangle region, int step);
GeneralPath ProductUtils_createGeoBoundaryPaths1(Product product);
GeneralPath ProductUtils_createGeoBoundaryPaths2(Product product, Rectangle region, int step);
GeneralPath ProductUtils_createGeoBoundaryPaths3(Product product, Rectangle region, int step, boolean usePixelCenter);
PixelPos ProductUtils_createPixelBoundary1(Product product, Rectangle rect, int step);
PixelPos ProductUtils_createPixelBoundary2(Product product, Rectangle rect, int step, boolean usePixelCenter);
PixelPos ProductUtils_createPixelBoundary3(RasterDataNode raster, Rectangle rect, int step);
PixelPos ProductUtils_createRectBoundary1(Rectangle rect, int step);
PixelPos ProductUtils_createRectBoundary2(Rectangle rect, int step, boolean usePixelCenter);
void ProductUtils_copyFlagCodings(Product source, Product target);
FlagCoding ProductUtils_copyFlagCoding(FlagCoding sourceFlagCoding, Product target);
IndexCoding ProductUtils_copyIndexCoding(IndexCoding sourceIndexCoding, Product target);
void ProductUtils_copyMasks(Product sourceProduct, Product targetProduct);
void ProductUtils_copyOverlayMasks(Product sourceProduct, Product targetProduct);
void ProductUtils_copyFlagBands(Product sourceProduct, Product targetProduct, boolean copySourceImage);
TiePointGrid ProductUtils_copyTiePointGrid(const char* gridName, Product sourceProduct, Product targetProduct);
Band ProductUtils_copyBand1(const char* sourceBandName, Product sourceProduct, Product targetProduct, boolean copySourceImage);
Band ProductUtils_copyBand2(const char* sourceBandName, Product sourceProduct, const char* targetBandName, Product targetProduct, boolean copySourceImage);
void ProductUtils_copyRasterDataNodeProperties(RasterDataNode sourceRaster, RasterDataNode targetRaster);
void ProductUtils_copySpectralBandProperties(Band sourceBand, Band targetBand);
void ProductUtils_copyGeoCoding(Product sourceProduct, Product targetProduct);
void ProductUtils_copyTiePointGrids(Product sourceProduct, Product targetProduct);
void ProductUtils_copyVectorData(Product sourceProduct, Product targetProduct);
boolean ProductUtils_canGetPixelPos1(Product product);
boolean ProductUtils_canGetPixelPos2(RasterDataNode raster);
BufferedImage ProductUtils_createDensityPlotImage(RasterDataNode raster1, float sampleMin1, float sampleMax1, RasterDataNode raster2, float sampleMin2, float sampleMax2, Mask roiMask, int width, int height, Color background, BufferedImage image, ProgressMonitor pm);
BufferedImage ProductUtils_overlayMasks(RasterDataNode raster, BufferedImage overlayBIm, ProgressMonitor pm);
GeoPos ProductUtils_getCenterGeoPos(Product product);
int ProductUtils_normalizeGeoPolygon(GeoPos polygon);
int ProductUtils_normalizeGeoPolygon_old(GeoPos polygon);
void ProductUtils_denormalizeGeoPolygon(GeoPos polygon);
void ProductUtils_denormalizeGeoPos(GeoPos geoPos);
void ProductUtils_denormalizeGeoPos_old(GeoPos geoPos);
int ProductUtils_getRotationDirection(GeoPos polygon);
double ProductUtils_getAngleSum(GeoPos polygon);
GeneralPath ProductUtils_convertToPixelPath(GeneralPath geoPath, GeoCoding geoCoding);
GeneralPath ProductUtils_convertToGeoPath(Shape shape, GeoCoding geoCoding);
void ProductUtils_copyMetadata1(Product source, Product target);
void ProductUtils_copyMetadata2(MetadataElement source, MetadataElement target);
void ProductUtils_copyPreferredTileSize(Product sourceProduct, Product targetProduct);
GeoTIFFMetadata ProductUtils_createGeoTIFFMetadata1(Product product);
GeoTIFFMetadata ProductUtils_createGeoTIFFMetadata2(GeoCoding geoCoding, int width, int height);
GeneralPath ProductUtils_areaToPath(Area negativeArea, double deltaX);
void ProductUtils_addElementToHistory(Product product, MetadataElement elem);
char* ProductUtils_removeInvalidExpressions(Product product);
char* ProductUtils_findSuitableQuicklookBandName(Product product);
PixelPos ProductUtils_computeSourcePixelCoordinates(GeoCoding sourceGeoCoding, int sourceWidth, int sourceHeight, GeoCoding destGeoCoding, Rectangle destArea);
float ProductUtils_computeMinMaxY(PixelPos pixelPositions);
void ProductUtils_copyBandsForGeomTransform1(Product sourceProduct, Product targetProduct, double defaultNoDataValue, Map addedRasterDataNodes);
void ProductUtils_copyBandsForGeomTransform2(Product sourceProduct, Product targetProduct, boolean includeTiePointGrids, double defaultNoDataValue, Map targetToSourceMap);
ProductData_UTC ProductUtils_getScanLineTime(Product product, double y);
double ProductUtils_getGeophysicalSampleDouble(Band band, int pixelX, int pixelY, int level);
dlong ProductUtils_getGeophysicalSampleLong(Band band, int pixelX, int pixelY, int level);
