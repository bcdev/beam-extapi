\#include "beam-wrappers.h"

#foreach( $class in $wrappedClasses )
typedef void* ${class.externalName};
#end

#foreach( $class in $wrappedClasses )
static jclass ${class.externalName}_class;
#end

int beam_init_classes()
{
#foreach( $class in $wrappedClasses )
    ${class.externalName}_class = (*jenv)->FindClass(jenv, "${class.resourceName}");
    if (${class.externalName}_class == NULL) return 1;

#end
    return 0;
}


#foreach( $class in $wrappedClasses )
    #set( $methods = $wrappedClassMethods.get($class.javaName) )
    #foreach( $method in $methods )

$method.methodDoc.returnType().simpleTypeName() ${method.externalName}(
#if ( ! $method.methodDoc.isStatic() )
    $class.externalName self#if ( $method.methodDoc.parameters().length > 0 ),#end
#end
#foreach( $param in $method.methodDoc.parameters() )
    $param.typeName() $param.name()#if ( $foreach.hasNext ),#end
#end
)
{
    static jmethodID method = NULL;
    $method.methodDoc.returnType().simpleTypeName() ret_value;

    if (method == NULL) {
#if ( $method.methodDoc.isStatic() )
#set($getter = "GetStaticMethodID")
#else
#set($getter = "GetMethodID")
#end
        method = (*jenv)->$getter(jenv, ${class.externalName}_class, "${method.javaName}", "${method.javaSignature}");
        if (method == NULL) {
            return 0;
        }
    }

#if ( $method.methodDoc.isStatic() )
#set($caller = "CallStaticObjectMethod")
#else
#set($caller = "CallObjectMethod")
#end
    ret_value = (*jenv)->$caller(jenv, ${class.externalName}_class, method
#if ( ! $method.methodDoc.isStatic() )
        , self
#end
#foreach( $param in $method.methodDoc.parameters() )
        , $param.name()
#end
    );

    return ret_value;
}

#end
#end
