package org.esa.beam.extapi.gen;

import java.io.IOException;
import java.io.PrintWriter;

import static org.esa.beam.extapi.gen.TemplateEval.kv;

/**
 * @author Norman Fomferra
 */
public class CodeGenHelpers {

    public static void writeCFileInfo(PrintWriter writer) {

//        writer.write(String.format("/*\n" +
//                                           " * DO NOT EDIT THIS FILE, IT IS MACHINE-GENERATED\n" +
//                                           " * File created at %s using %s\n" +
//                                           " */\n", new Date(), ApiGeneratorDoclet.class.getName()));

        // Removed generation date from header, because I don't want changes every time I generate code
        writer.write(String.format("/*\n" +
                                           " * DO NOT EDIT THIS FILE, IT IS MACHINE-GENERATED\n" +
                                           " * This code has been generated using %s\n" +
                                           " */\n", ApiGeneratorDoclet.class.getName()));
        writer.write("\n");
    }

    public static void writeCHeader(PrintWriter writer,
                                    String headerName,
                                    ContentWriter contentWriter) throws IOException {
        String headerNameUC = headerName.toUpperCase().replace('.', '_');
        writeCFileInfo(writer);
        writer.write(TemplateEval.eval("#ifndef ${headerNameUC}\n" +
                                "#define ${headerNameUC}\n" +
                                "\n" +
                                "#ifdef __cplusplus\n" +
                                "extern \"C\" {\n" +
                                "#endif\n",
                            kv("headerNameUC", headerNameUC)));

        writer.write("\n");
        contentWriter.writeContent(writer);
        writer.write("\n");

        writer.write(TemplateEval.eval("#ifdef __cplusplus\n" +
                                               "} /* extern \"C\" */\n" +
                                               "#endif\n" +
                                               "#endif /* !${headerNameUC} */",
                                       kv("headerNameUC", headerNameUC)));
    }

    public static void writeCode(PrintWriter writer, String code) throws IOException {
        String[] callCode = generateLines(code);
        for (String line : callCode) {
            writer.printf("    %s\n", line);
        }
    }

    public static String[] generateLines(String code) {
        if (code == null || code.length() == 0) {
            return new String[0];
        }
        return code.split("\n");
    }
}
